// <auto-generated />
using System;
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(BinaryDbContext))]
    [Migration("20190710133133_AddSeedData")]
    partial class AddSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLayer.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Deadline");

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2019, 2, 10, 16, 31, 32, 518, DateTimeKind.Local).AddTicks(4102),
                            Deadline = new DateTime(2019, 12, 10, 16, 31, 32, 518, DateTimeKind.Local).AddTicks(4540),
                            Description = "Project 1",
                            Name = "Project 1",
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<DateTime>("FinishedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int?>("PerformerId");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("TaskStateId");

                    b.HasKey("Id");

                    b.HasIndex("PerformerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskStateId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 2, 10, 16, 31, 32, 517, DateTimeKind.Local).AddTicks(5194),
                            Description = "Task 1",
                            FinishedAt = new DateTime(2019, 12, 10, 16, 31, 32, 517, DateTimeKind.Local).AddTicks(5634),
                            Name = "Task 1",
                            PerformerId = 1,
                            ProjectId = 1,
                            TaskStateId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 2, 10, 16, 31, 32, 517, DateTimeKind.Local).AddTicks(7147),
                            Description = "Task 2",
                            FinishedAt = new DateTime(2019, 12, 10, 16, 31, 32, 517, DateTimeKind.Local).AddTicks(7159),
                            Name = "Task 2",
                            PerformerId = 2,
                            ProjectId = 1,
                            TaskStateId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2019, 2, 10, 16, 31, 32, 517, DateTimeKind.Local).AddTicks(7176),
                            Description = "Task 3",
                            FinishedAt = new DateTime(2019, 12, 10, 16, 31, 32, 517, DateTimeKind.Local).AddTicks(7179),
                            Name = "Task 3",
                            PerformerId = 1,
                            ProjectId = 1,
                            TaskStateId = 3
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TaskState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("TaskStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Created"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Started"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Finished"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Canceled"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 2, 10, 16, 31, 32, 518, DateTimeKind.Local).AddTicks(179),
                            Name = "Team 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 2, 10, 16, 31, 32, 518, DateTimeKind.Local).AddTicks(1100),
                            Name = "Team 2"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTime>("RegisteredAt");

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(2019, 2, 10, 16, 31, 32, 515, DateTimeKind.Local).AddTicks(5223),
                            Email = "john.doe@mail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            RegisteredAt = new DateTime(2019, 7, 20, 16, 31, 32, 516, DateTimeKind.Local).AddTicks(9237),
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(2019, 1, 10, 16, 31, 32, 517, DateTimeKind.Local).AddTicks(216),
                            Email = "jane.doe@mail.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            RegisteredAt = new DateTime(2019, 7, 25, 16, 31, 32, 517, DateTimeKind.Local).AddTicks(229),
                            TeamId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Project", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", "Author")
                        .WithMany("Projects")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Entities.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Task", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", "Performer")
                        .WithMany("Tasks")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataAccessLayer.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Entities.TaskState", "TaskState")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskStateId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
